#! /usr/bin/env ipython

# import
%run manage/manage.ipy

import os
        
''' App tools '''
class AppSplurge():
  def __init__(self, root_path, project, hostname, db_engine, http_engine):
    self.root_path = root_path
    self.project = project
    self.hostname = hostname
    self.db_engine = db_engine
    self.http_engine = http_engine
    self.whoami = !whoami
    self.whoami = self.whoami[0]
    self.root_app_path = os.path.join(root_path, 'app/')
    self.root_bin_path = os.path.join(root_path, 'app/bin/')
    self.website_path = os.path.join(self.root_app_path, 'website/splurge')
    self.website_config = os.path.join(self.root_app_path, 'webservice/' + http_engine.name + '/' + hostname)
    self.webapp = WebAppBasic(
      WebSite(http_engine, hostname, self.website_path, self.website_config),
      Db(db_engine, 'splurge', 'splurge_user', os.environ['SPLURGE_DB_PASSWORD'])
    )
    import sys
    sys.path.append(self.root_bin_path) 
    import splurge
    self.splurge = splurge.Splurge(
      os.path.join(self.root_app_path, 'data/'),
      os.path.join(self.root_app_path, 'logs/'),
      self.webapp.db.database, self.webapp.db.username, self.webapp.db.password, 
      self.webapp.db.service.hostname, self.webapp.db.service.port,
    )
  def rebuild_database(self):
    self.webapp.db.drop();
    self.webapp.db.create();
    self.webapp.db.backup_restore(self.root_app_path + '/db/' + 'schema_dump.sql')
    self.splurge.db_reconnect()
    self.splurge.load_institution_updates()
  def _rebuild_templates(self):
    Helper.render_templates_in_path(self, self.root_app_path + '/webservice/', '*.manage_template')
  def _rebuild_hosts(self):
    Helper.remove_hosts_dns(self.hostname)
    Helper.add_hosts_dns('127.0.0.1', self.hostname + ' p0.' + self.hostname + ' p1.' + self.hostname)
  def install(self):
    self._rebuild_hosts()
    self._rebuild_templates()
    !sudo apt-get install python-flask
    WebServiceApache2Debian().install_service_load_balancer()
    WebServiceApache2Debian().install_service_wsgi()
    self.webapp.install()
    self.rebuild_database()
  def uninstall(self):
    self.webapp.uninstall()


if __name__ == '__main__':
    import os
    currentpath = os.path.dirname(__file__)
    project = os.path.basename(currentpath)
    hostname = project + '.localhost'
        
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 1.0')
    parser.add_argument('-r', '--root_path', help='set root path of project', default=currentpath )
    parser.add_argument('-p', '--project', help='set project', default=project )
    parser.add_argument('-n', '--hostname', help='set hostname', default=hostname )
    parser.add_argument('-d', '--db_engine', help='options: mysql, pgsql', default='pgsql')
    parser.add_argument('-w', '--http_engine', help='options: apache2, nginx', default='apache2')
    parser.add_argument('command', nargs='?', help='commands: uw_base_profile, uwlib_profile ', default=None)
    args = parser.parse_args()

    db_engine = DbServiceFactory().build(args.db_engine)
    http_engine = WebServiceFactory().build(args.http_engine)
    app = AppSplurge(args.root_path, args.project, args.hostname, db_engine, http_engine)
       
    # todo: make more general
    if args.command:
      eval("app."+'args.command'+"()")
    else:
      print("\nHint: type 'app.install()'  or app.[tab-autocomplete]")
      print("Hint: type ? on a command for help.. '?app.install()' ")
